/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var f=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var B=Object.getOwnPropertyNames;var E=Object.prototype.hasOwnProperty;var P=(C,u)=>{for(var t in u)f(C,t,{get:u[t],enumerable:!0})},V=(C,u,t,s)=>{if(u&&typeof u=="object"||typeof u=="function")for(let e of B(u))!E.call(C,e)&&e!==t&&f(C,e,{get:()=>u[e],enumerable:!(s=k(u,e))||s.enumerable});return C};var D=C=>V(f({},"__esModule",{value:!0}),C);var $={};P($,{default:()=>b});module.exports=D($);var g=require("obsidian"),v=require("@codemirror/view"),y={tooltipTextColor:"var(--text-normal)",tooltipBackgroundColor:"var(--background-primary)",tooltipBorderColor:"var(--background-modifier-border)",boldTextColor:"var(--bold-color)"},b=class extends g.Plugin{async onload(){await this.loadSettings(),this.addSettingTab(new w(this.app,this)),this.registerMarkdownPostProcessor((t,s)=>{let e=document.createTreeWalker(t,NodeFilter.SHOW_TEXT,null),d=[],i;for(;i=e.nextNode();)d.push(i);d.forEach(n=>{let r=n.textContent;if(!r)return;let x=/\[(.*?)\]\{(.*?)\}/g,c,h=0,a=[];for(;(c=x.exec(r))!==null;){c.index>h&&a.push(document.createTextNode(r.slice(h,c.index)));let[p,m,l]=c,o=document.createElement("span");o.addClass("hover-reveal-container");let T=document.createElement("span");T.addClass("hover-reveal"),T.setText(m);let S=document.createElement("div");S.addClass("hover-reveal-tooltip"),S.setText(l),T.appendChild(S),o.appendChild(T),a.push(o),h=c.index+p.length}if(h<r.length&&a.push(document.createTextNode(r.slice(h))),a.length>0&&n.parentNode){let p=document.createDocumentFragment();a.forEach(m=>p.appendChild(m)),n.parentNode.replaceChild(p,n)}})}),this.registerEditorExtension(this.hoverRevealExtension())}onunload(){let t=document.getElementById("hover-reveal-custom-styles");t&&t.remove()}async loadSettings(){this.settings=Object.assign({},y,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}hoverRevealExtension(){class t extends v.WidgetType{constructor(i,n,r,x,c,h){super();this.visibleText=i;this.tooltipText=n;this.from=r;this.to=x;this.view=c;this.isActive=h}toDOM(){let i=document.createElement("span");if(this.isActive)i.textContent=`[${this.visibleText}]{${this.tooltipText}}`;else{i.addClass("hover-reveal"),i.setText(this.visibleText);let n=document.createElement("div");n.addClass("hover-reveal-tooltip"),n.setText(this.tooltipText),i.appendChild(n)}return i}eq(i){return i.visibleText===this.visibleText&&i.tooltipText===this.tooltipText&&i.from===this.from&&i.to===this.to&&i.isActive===this.isActive}}return[v.ViewPlugin.fromClass(class{constructor(e){this.decorations=this.buildDecorations(e)}update(e){(e.docChanged||e.viewportChanged||e.selectionSet)&&(this.decorations=this.buildDecorations(e.view))}buildDecorations(e){let d=[],i=e.state.doc.toString(),n=/\[(.*?)\]\{(.*?)\}/g,r;for(;(r=n.exec(i))!==null;){let[x,c,h]=r,a=r.index,p=a+x.length,m=e.state.selection.main.from;m>=a&&m<=p||d.push(v.Decoration.replace({widget:new t(c,h,a,p,e,!1),inclusive:!0}).range(a,p))}return v.Decoration.set(d)}},{decorations:e=>e.decorations})]}updateStyles(){let t=document.createElement("style");t.id="hover-reveal-custom-styles",t.textContent=`
			.hover-reveal-tooltip {
				color: ${this.settings.tooltipTextColor} !important;
				background-color: ${this.settings.tooltipBackgroundColor} !important;
				border-color: ${this.settings.tooltipBorderColor} !important;
			}
			.hover-reveal-tooltip::after {
				border-top-color: ${this.settings.tooltipBackgroundColor} !important;
			}
			.hover-reveal {
				color: ${this.settings.boldTextColor} !important;
			}
		`;let s=document.getElementById("hover-reveal-custom-styles");s&&s.remove(),document.head.appendChild(t)}},w=class extends g.PluginSettingTab{constructor(t,s){super(t,s);this.plugin=s}getComputedColor(t){var d;let s=document.createElement("div");document.body.appendChild(s),s.style.color=t;let e=getComputedStyle(s).color;if(document.body.removeChild(s),e.startsWith("rgb")){let[i,n,r]=((d=e.match(/\d+/g))==null?void 0:d.map(Number))||[0,0,0];return`#${i.toString(16).padStart(2,"0")}${n.toString(16).padStart(2,"0")}${r.toString(16).padStart(2,"0")}`}return e||t}display(){let{containerEl:t}=this;t.empty(),new g.Setting(t).setName("Reset settings").setDesc("Reset all settings to default values").addButton(l=>l.setButtonText("Reset").onClick(async()=>{this.plugin.settings.tooltipTextColor=y.tooltipTextColor,this.plugin.settings.tooltipBackgroundColor=y.tooltipBackgroundColor,this.plugin.settings.tooltipBorderColor=y.tooltipBorderColor,this.plugin.settings.boldTextColor=y.boldTextColor,await this.plugin.saveSettings(),this.display(),this.updateStyles(),new g.Notice("Reset settings to default")}));let s,e,d=this.getComputedColor(this.plugin.settings.tooltipTextColor);new g.Setting(t).setName("Tooltip text color").setDesc("Set the text color of the tooltip").addText(l=>(s=l.setPlaceholder("var(--text-normal)").setValue(d).onChange(async o=>{this.plugin.settings.tooltipTextColor=o,e.setValue(o),await this.plugin.saveSettings(),this.plugin.updateStyles()}),s)).addColorPicker(l=>(e=l.setValue(d).onChange(async o=>{this.plugin.settings.tooltipTextColor=o,s.setValue(o),await this.plugin.saveSettings(),this.plugin.updateStyles()}),e));let i,n,r=this.getComputedColor(this.plugin.settings.tooltipBackgroundColor);new g.Setting(t).setName("Tooltip background color").setDesc("Set the background color of the tooltip").addText(l=>(i=l.setPlaceholder("var(--background-primary)").setValue(r).onChange(async o=>{this.plugin.settings.tooltipBackgroundColor=o,n.setValue(o),await this.plugin.saveSettings(),this.plugin.updateStyles()}),i)).addColorPicker(l=>(n=l.setValue(r).onChange(async o=>{this.plugin.settings.tooltipBackgroundColor=o,i.setValue(o),await this.plugin.saveSettings(),this.plugin.updateStyles()}),n));let x,c,h=this.getComputedColor(this.plugin.settings.tooltipBorderColor);new g.Setting(t).setName("Tooltip border color").setDesc("Set the border color of the tooltip").addText(l=>(x=l.setPlaceholder("var(--background-modifier-border)").setValue(h).onChange(async o=>{this.plugin.settings.tooltipBorderColor=o,c.setValue(o),await this.plugin.saveSettings(),this.plugin.updateStyles()}),x)).addColorPicker(l=>(c=l.setValue(h).onChange(async o=>{this.plugin.settings.tooltipBorderColor=o,x.setValue(o),await this.plugin.saveSettings(),this.plugin.updateStyles()}),c));let a,p,m=this.getComputedColor(this.plugin.settings.boldTextColor);new g.Setting(t).setName("Bold text color").setDesc("Set the color of the bold text").addText(l=>(a=l.setPlaceholder("var(--bold-color)").setValue(m).onChange(async o=>{this.plugin.settings.boldTextColor=o,p.setValue(o),await this.plugin.saveSettings(),this.plugin.updateStyles()}),a)).addColorPicker(l=>(p=l.setValue(m).onChange(async o=>{this.plugin.settings.boldTextColor=o,a.setValue(o),await this.plugin.saveSettings(),this.plugin.updateStyles()}),p))}updateStyles(){let t=document.createElement("style");t.id="hover-reveal-custom-styles",t.textContent=`
			.hover-reveal-tooltip {
				color: ${this.plugin.settings.tooltipTextColor} !important;
				background-color: ${this.plugin.settings.tooltipBackgroundColor} !important;
				border-color: ${this.plugin.settings.tooltipBorderColor} !important;
			}
			.hover-reveal-tooltip::after {
				border-top-color: ${this.plugin.settings.tooltipBackgroundColor} !important;
			}
			.hover-reveal {
				color: ${this.plugin.settings.boldTextColor} !important;
			}
		`;let s=document.getElementById("hover-reveal-custom-styles");s&&s.remove(),document.head.appendChild(t)}};

/* nosourcemap */